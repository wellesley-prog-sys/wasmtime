(set-option :print-success true)
(set-option :produce-models true)
(set-logic ALL)
(declare-sort Unspecified 0)
(declare-sort Unit 0)
(declare-const loaded_value_0 (_ BitVec 64))
(declare-const clif_load_active_1 Bool)
(declare-const clif_load_size_bits_2 Int)
(declare-const clif_load_addr_3 (_ BitVec 64))
(declare-const clif_store_active_4 Bool)
(declare-const clif_store_size_bits_5 Int)
(declare-const clif_store_addr_6 (_ BitVec 64))
(declare-const clif_store_value_7 (_ BitVec 64))
(declare-const isa_load_active_8 Bool)
(declare-const isa_load_size_bits_9 Int)
(declare-const isa_load_addr_10 (_ BitVec 64))
(declare-const isa_store_active_11 Bool)
(declare-const isa_store_size_bits_12 Int)
(declare-const isa_store_addr_13 (_ BitVec 64))
(declare-const isa_store_value_14 (_ BitVec 64))
(declare-const b0_15 (_ BitVec 32))
(declare-const b3_some_16 Bool)
(declare-const b3_inner_0_17 Int)
(declare-const b3_inner_1_18 (_ BitVec 32))
(declare-const e19 Bool)
(assert (! (= e19 (= b0_15 b3_inner_1_18)) :named expr19))
(declare-const e20 Int)
(assert (! (= e20 32) :named expr20))
(declare-const e21 Bool)
(assert (! (= e21 (= b3_inner_0_17 e20)) :named expr21))
(declare-const e22 Bool)
(assert (! (= e22 (= b3_some_16 e21)) :named expr22))
(declare-const b4_0_23 Int)
(declare-const b4_1_24 (_ BitVec 32))
(declare-const e25 Bool)
(assert (! (= e25 (= b4_0_23 b3_inner_0_17)) :named expr25))
(declare-const e26 Bool)
(assert (! (= e26 (= b4_1_24 b3_inner_1_18)) :named expr26))
(declare-const e27 Bool)
(assert (! (= e27 (and e25 e26)) :named expr27))
(declare-const e28 Bool)
(assert (! (= e28 (=> b3_some_16 e27)) :named expr28))
(declare-const b5_29 Int)
(declare-const e30 Bool)
(assert (! (= e30 (= b5_29 b4_0_23)) :named expr30))
(declare-const b6_31 (_ BitVec 32))
(declare-const e32 Bool)
(assert (! (= e32 (= b6_31 b4_1_24)) :named expr32))
(declare-const b7_some_33 Bool)
(declare-const b7_inner_0_34 (_ BitVec 32))
(declare-const b7_inner_1_35 (_ BitVec 32))
(declare-const e36 (_ BitVec 32))
