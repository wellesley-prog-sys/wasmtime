(type MInst
  (enum)
)

(type Imm12 (primitive Imm12))

;; A tuple of `ProducesFlags` and `IntCC`.
(type FlagsAndCC (enum (FlagsAndCC (flags ProducesFlags)
                                   (cc IntCC))))

(type OperandSize extern
      (enum Size32
            Size64))

;; Helper for calculating the `OperandSize` corresponding to a type
;;@ (spec (sig (args ty) (ret))
;;@     (provide (= (ret) 
;;@                    (if (<= (ty) (32i8:Int)) 
;;@                        (32i8:Int) 
;;@                        (64i8:Int))),
;;@ ))
(decl operand_size (Type) OperandSize)
(rule (operand_size (fits_in_32 _ty)) (OperandSize.Size32))
(rule (operand_size (fits_in_64 _ty)) (OperandSize.Size64))

;; (0i8:bv8) =
;; (1i8:bv8) != 
;; (2i8:bv8) sgt
;; (3i8:bv8) sgte
;; (4i8:bv8) slt
;; (5i8:bv8) slte
;; (6i8:bv8) ugt
;; (7i8:bv8) ugte
;; (8i8:bv8) ult
;; (9i8:bv8) ulte
;;@ (spec (sig (args c, x, y, in_ty) (ret))
;;@   (provide 
;;@     (= (ret) 
;;@        (| (shl (zero_ext (12i8:Int 
;;@           (extract 67 64 
;;@           (if (&& (ugte (c) (2i8:bv8)) (ulte (c) (5i8:bv8))) 
;;@             (if (<= (in_ty) (32i8:Int))
;;@               (subs (32i8:Int) (sign_ext (64i8:Int) (x)) (sign_ext (64i8:Int) (y)))
;;@               (subs (64i8:Int) (sign_ext (64i8:Int) (x)) (sign_ext (64i8:Int) (y)))
;;@             )
;;@             (if (<= (in_ty) (32i8:Int))
;;@               (subs (32i8:Int) (zero_ext (64i8:Int) (x)) (zero_ext (64i8:Int) (y)))
;;@               (subs (64i8:Int) (zero_ext (64i8:Int) (x)) (zero_ext (64i8:Int) (y)))
;;@             )
;;@           ))
;;@          )
;;@          (8i12:bv12))
;;@       (zero_ext (12i8:Int (c)))
;;@     ),
;;@
;;@     (ulte (c) (9i8:bv8)),
;;@
;;@     (|| (= (in_ty) (8i8:Int)
;;@     (|| (= (in_ty) (16i8:Int)
;;@     (|| (= (in_ty) (32i8:Int)
;;@     (= (in_ty) (64i8:Int)))),
;;@
;;@     (= (in_ty) (widthof (x))),
;;@     (= (in_ty) (widthof (y))),
;;@ ))
(decl lower_icmp (IntCC Value Value Type) FlagsAndCC)
(extern extractor lower_icmp lower_icmp)

;; Note that 4095 = 0xfff and 16773120 = 0xfff000
;;@ (spec (sig (args arg) (ret))
;;@     (provide (|| (< (zero_ext (64i8:Int) (ret)) (4095i64:bv))
;;@                     (&& (< (zero_ext (64i8:Int) (ret)) (16773120i64:bv))
;;@                         (= (extract 2 0 (zero_ext (64i8:Int) (ret))) #b000)
;;@                 )),
;;@                 (= (ret) (conv_to (widthof (ret)) (zero_ext (64i8:Int) (arg)))),
;;@                 (= (arg) (conv_to (widthof (arg)) (zero_ext (64i8:Int) (ret)))),
;;@ ))
(decl imm12_from_value (Imm12) Value)
(extern extractor imm12_from_value imm12_from_value)

;; Place a `Value` into a register, zero extending it to 32-bits
;;@ (spec (sig (args arg) (ret))
;;@     (provide (
;;@          if (<= (32i0:Int) (widthof (arg))) 
;;@             (= (ret) (conv_to (64i8:Int) (arg)))             
;;@             (= (ret) (conv_to (64i8:Int) (zero_ext (32) (arg))))
;;@          )
;;@ ))
(decl put_in_reg_zext32 (Value) Reg)
(extern constructor put_in_reg_zext32 put_in_reg_zext32)

;;@ (spec (sig (args pflags, c) (ret))
;;@   (provide 
;;@     (= (ret) (| (shl (zero_ext (12i8:Int 
;;@        (extract 67 64 (pflags))
;;@        )
;;@        (8i12:bv12))
;;@       (zero_ext (12i8:Int (c)))
;;@     ),
;;@ ))
(decl flags_and_cc (ProducesFlags IntCC) FlagsAndCC)
(extern constructor flags_and_cc flags_and_cc)

;; N: Set to 1 when the result of the operation is negative, cleared to 0 otherwise.
;; Z: Set to 1 when the result of the operation is zero, cleared to 0 otherwise.
;; C: Set to 1 when the operation results in a carry, or when a subtraction results in no borrow, cleared to 0 otherwise.
;; V: Set to 1 when the operation causes overflow, cleared to 0 otherwise.
;;@ (spec (sig (args ty, x, y, extend) (ret))
;;@   (provide 
;;@     (= (ret) 
;;@        (subs (ty) (x) 
;;@          (switch (extend)
;;@            ((0i8: bv3) (zero_ext (64i8:Int) (extract 7 0 (y))))
;;@            ((1i8: bv3) (zero_ext (64i8:Int) (extract 15 0 (y))))
;;@            ((2i8: bv3) (zero_ext (64i8:Int) (extract 31 0 (y))))
;;@            ((3i8: bv3) (zero_ext (64i8:Int) (extract 63 0 (y))))
;;@            ((4i8: bv3) (sign_ext (64i8:Int) (extract 7 0 (y))))
;;@            ((5i8: bv3) (sign_ext (64i8:Int) (extract 15 0 (y))))
;;@            ((6i8: bv3) (sign_ext (64i8:Int) (extract 31 0 (y))))
;;@            ((7i8: bv3) (sign_ext (64i8:Int) (extract 63 0 (y))))
;;@          )
;;@        )
;;@      ),
;;@      (|| (= (ty) (32i8:Int)
;;@          (= (ty) (64i8:Int)),
;;@ ))
(decl cmp_extend (OperandSize Reg Reg ExtendOp) ProducesFlags)
(extern constructor cmp_extend cmp_extend)

(type ExtendOp extern
  (enum
    (UXTB) ;; 0
    (UXTH) ;; 1
    (UXTW) ;; 2
    (UXTX) ;; 3
    (SXTB) ;; 4
    (SXTH) ;; 5
    (SXTW) ;; 6
    (SXTX) ;; 7
))

;;@ (spec (sig (args ty, b) (ret))
;;@   (provide 
;;@     (= (ret) 
;;@        (switch (ty) 
;;@          ((8i8:Int (if (b) (4i8: bv3) (0i8: bv3)))
;;@          ((16i8:Int (if (b) (5i8: bv3) (1i8: bv3)))
;;@        )
;;@      ),
;;@     (|| (= (ty) (8i8:Int)
;;@     (|| (= (ty) (16i8:Int)
;;@     (|| (= (ty) (32i8:Int)
;;@     (= (ty) (64i8:Int)))),
;;@ ))
(decl lower_extend_op (Type bool) ExtendOp)
(rule (lower_extend_op $I8 $true) (ExtendOp.SXTB))
(rule (lower_extend_op $I16 $true) (ExtendOp.SXTH))
(rule (lower_extend_op $I8 $false) (ExtendOp.UXTB))
(rule (lower_extend_op $I16 $false) (ExtendOp.UXTH))

(spec (put_in_reg_sext32 arg) 
  (provide 
    (= result 
       (if (<= (widthof arg) 32) 
           (conv_to 64 (sign_ext 32 arg))
           (conv_to 64 arg)))))
(decl put_in_reg_sext32 (Value) Reg)
(extern constructor put_in_reg_sext32 put_in_reg_sext32)

(rule 1 (lower_icmp cond rn rm (fits_in_16 ty))
      (if (signed_cond_code cond))
      (let ((rn Reg (put_in_reg_sext32 rn)))
      (flags_and_cc (cmp_extend (operand_size ty) rn rm (lower_extend_op ty $true)) cond)))