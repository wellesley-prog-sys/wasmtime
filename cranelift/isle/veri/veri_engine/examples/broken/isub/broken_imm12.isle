(spec (lower arg)
    (provide (= result arg)))
(decl lower (Inst) InstOutput)

(type MInst
  (enum
))

;; Imm12 modeled as the range of intermediates it can represent.
(model Imm12 (type (bv 24)))
(type Imm12 (primitive Imm12))

(type ALUOp
  (enum
    (Sub)
))

;; Note that 4094 = 0xffe and 16773119 = 0xffefff
(spec (sub_imm ty a b)
  (provide
    (= result
       (if (<= ty 32)
           (conv_to 64 (bvsub (extract 31 0 a) (zero_ext 32 b)))
           (bvsub a (zero_ext 64 b)))))
  (require (or (bvult (zero_ext 64 b) #x0000000000000fff)
                (and (bvult (zero_ext 64 b) #x0000000000fff000)
                     (= (extract 2 0 (zero_ext 64 b)) #b000)))
            (= (widthof b) 24)))
(decl sub_imm (Type Reg Imm12) Reg)
(rule (sub_imm ty x y) (alu_rr_imm12 (ALUOp.Sub) ty x y))

(decl alu_rr_imm12 (ALUOp Type Reg Imm12) Reg)
(extern constructor alu_rr_imm12 alu_rr_imm12)

;; Broken: no require
(spec (imm12_from_value arg)
      (provide
            (= result (conv_to (widthof result) (zero_ext 64 arg)))
            (= arg (conv_to (widthof arg) (zero_ext 64 result)))))
(decl imm12_from_value (Imm12) Value)
(extern extractor imm12_from_value imm12_from_value)

(rule 0 (lower (has_type (fits_in_64 ty) (isub x (imm12_from_value y))))
      (sub_imm ty x y))
