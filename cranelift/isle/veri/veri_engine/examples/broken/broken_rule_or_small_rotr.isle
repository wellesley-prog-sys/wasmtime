(type ImmLogic (primitive ImmLogic))
(type Imm12 (primitive Imm12))

(spec (sub ty a b) (provide (= (bvsub a b) result)))
(decl sub (Type Reg Reg) Reg)
(extern constructor sub sub)

(spec (zero_reg)
    (provide (= (zero_ext 64 #x0000000000000000) result)))
(decl zero_reg () Reg)
(extern constructor zero_reg zero_reg)

(spec (extend a b c d)
    (provide
        (if b
            (= result (sign_ext (bv2int d) (conv_to (bv2int c) a)))
            (= result (zero_ext (bv2int d) (conv_to (bv2int c) a))))))
(decl extend (Reg bool u8 u8) Reg)
(extern constructor extend extend)

(spec (and_imm ty x y)
  (provide
    (= result
       (switch ty
         (32 (conv_to 64 (bvand (extract 31 0 x) (extract 31 0 y))))
         (64 (bvand x (zero_ext 64 y))))))
    (require
      (or (<= (bv2int y) 4094)
          (and (<= (bv2int y) 16773119)
              (= (extract 2 0 y) #b000)))))
(decl and_imm (Type Reg ImmLogic) Reg)
(extern constructor and_imm and_imm)

;; Place a `Value` into a register, zero extending it to 32-bits
(spec (put_in_reg_zext32 arg)
  (provide
    (= result
       (if (<= (widthof arg) 32)
           (conv_to 64 (zero_ext 32 arg))
           (conv_to 64 arg)))))
(decl put_in_reg_zext32 (Value) Reg)
(extern constructor put_in_reg_zext32 put_in_reg_zext32)

;; Corresponding rust:
;; fn rotr_mask(&mut self, ty: Type) -> ImmLogic {
;;     ImmLogic::maybe_from_u64((ty.bits() - 1) as u64, I32).unwrap()
;; }
;;
(spec (rotr_mask x) (provide (= (bvsub (int2bv 64 x) #x0000000000000001) result)))
(decl rotr_mask (Type) ImmLogic)
(extern constructor rotr_mask rotr_mask)

;; Note that 4094 = 0xffe and 16773119 = 0xffefff
(spec (sub_imm ty a b)
  (provide
    (= result
       (if (<= ty 32)
           (conv_to 64 (bvsub (extract 31 0 a) (zero_ext 32 b)))
           (bvsub a (zero_ext 64 b)))))
  (require (or (bvult (zero_ext 64 b) #x0000000000000fff)
                (and (bvult (zero_ext 64 b) #x0000000000fff000)
                     (= (extract 2 0 (zero_ext 64 b)) #b000)))
            (= (widthof b) 24)))
(decl sub_imm (Type Reg Imm12) Reg)
(extern constructor sub_imm sub_imm)

(spec (u8_into_imm12 arg) (provide (= result (zero_ext 24 arg))))
(decl u8_into_imm12 (u8) Imm12)
(extern constructor u8_into_imm12 u8_into_imm12)

(spec (lsr ty a b)
  (provide
    (= result
       (switch ty
         (32 (conv_to 64 (bvlshr (extract 31 0 a) (extract 31 0 b))))
         (64 (bvlshr a b))))))
(decl lsr (Type Reg Reg) Reg)
(extern constructor lsr lsr)

(spec (lsl ty a b)
  (provide
    (= result
       (switch ty
         (32 (conv_to 64 (bvshl (extract 31 0 a) (extract 31 0 b))))
         (64 (bvshl a b))))))
(decl lsl (Type Reg Reg) Reg)
(extern constructor lsl lsl)

(spec (orr ty a b)
    (provide
      (= result
         (switch ty
           (32 (conv_to 64 (bvor (extract 31 0 a) (extract 31 0 b))))
           (64 (bvor a b))))))
(decl orr (Type Reg Reg) Reg)
(extern constructor orr orr)

;; Instruction formats.
(type MInst
  (enum
))


(spec (small_rotr t x y)
  (provide
    (= result
      (switch t
        (8 (conv_to 64 (rotr (extract 7 0 x) (extract 7 0 y))))
        (16 (conv_to 64 (rotr (extract 15 0 x) (extract 15 0 y)))))))
  (require
    (or (= t 8) (= t 16))
    (switch t
      (8 (= (extract 31 8 x) #x000000))
      (16 (= (extract 31 16 x) #x0000)))))
(instantiate small_rotr
    ((args Int (bv 64) (bv 64)) (ret (bv 64)) (canon (bv 64))))
(decl small_rotr (Type Reg Reg) Reg)

(spec (and_reg ty a b)
  (provide
    (= result
       (if (<= ty 32)
         (conv_to 64 (bvand (extract 31 0 a) (extract 31 0 b)))
         (bvand a b))))
  (require (or (= ty 8) (= ty 16) (= ty 32) (= ty 64))))
(decl and_reg (Type Reg Reg) Reg)
(extern constructor and_reg and_reg)

;; BROKEN: uses AND instead of OR

;; For a < 32-bit rotate-right, we synthesize this as:
;;
;;    rotr rd, val, amt
;;
;;       =>
;;
;;    and masked_amt, amt, <bitwidth - 1>
;;    sub tmp_sub masked_amt, <bitwidth>
;;    sub neg_amt, zero, tmp_sub  ; neg
;;    lsr val_rshift, val, masked_amt
;;    lsl val_lshift, val, neg_amt
;;    orr rd, val_lshift val_rshift
(rule (small_rotr ty val amt)
      (let ((masked_amt Reg (and_imm $I32 amt (rotr_mask ty)))
            (tmp_sub Reg (sub_imm $I32 masked_amt (u8_into_imm12 (ty_bits ty))))
            (neg_amt Reg (sub $I32 (zero_reg) tmp_sub))
            (val_rshift Reg (lsr $I32 val masked_amt))
            (val_lshift Reg (lsl $I32 val neg_amt)))
        (and_reg $I32 val_lshift val_rshift)))
