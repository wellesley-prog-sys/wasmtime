(type MInst
  (enum
))

(type Imm12 (primitive Imm12))

;;@ (spec (sig (args arg) (ret))
;;@     (provide (= (zero_ext (regwidth) (arg)) (ret))))
(decl imm12_from_u64 (Imm12) u64)
(extern extractor imm12_from_u64 imm12_from_u64)

;;@ (spec (sig (args arg) (ret))
;;@     (provide (= (ret) (- (arg)))))
(decl pure i64_neg (i64) i64)
(extern constructor i64_neg i64_neg)

;;@ (spec (sig (args ty, arg) (ret))
;;@     (provide (= (ret) (sign_ext (regwidth) (conv_to (ty) (arg))))))
(decl pure i64_sextend_imm64 (Type Imm64) i64)
(extern constructor i64_sextend_imm64 i64_sextend_imm64)

 ;; Conceptually the same as `imm12_from_value`, but tries negating the constant
 ;; value (first sign-extending to handle narrow widths).

(spec (imm12_from_negated_value arg)
    (provide (or (bvult (bvneg (sign_ext 64 arg)) #x0000000000000fff)
                    (and (bvult (bvneg (sign_ext 64 arg)) #x0000000000fff000)
                        (= (extract 2 0 (bvneg (sign_ext 64 arg))) #b000)))
                (= result (extract 23 0 (bvneg (sign_ext 64 arg))))))
(instantiate imm12_from_negated_value
    ((args (bv 8)) (ret (bv 24)) (canon (bv 8)))
    ((args (bv 16)) (ret (bv 24)) (canon (bv 16)))
    ((args (bv 32)) (ret (bv 24)) (canon (bv 32)))
    ((args (bv 64)) (ret (bv 24)) (canon (bv 64)))
)
(decl pure partial imm12_from_negated_value (Value) Imm12)
 (rule
   (imm12_from_negated_value (has_type ty (iconst n)))
   (if-let (imm12_from_u64 imm) (i64_as_u64 (i64_neg (i64_sextend_imm64 ty n))))
   imm)
