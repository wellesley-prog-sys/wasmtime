;;;; Verification Type Models ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(model Imm64 (type (bv 64)))

; REVIEW(mbm): do we need to model MemFlags?
(model MemFlags (type
    (struct
        (aligned Bool)
        (trapcode (bv 4))
    )
))

(model Offset32 (type (bv 32)))

;;;; State Definitions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Value loaded from memory.
;
; We deliberately do not attempt to model the entire state of memory. Modeling a
; loaded value this way allows us to express the fact that loaded values on CLIF
; and ISA side will be equivalent (combined with an assertion on address
; equality).
(state loaded_value
    (type (bv 64))
    (default true)
)

; Parameters of a CLIF load operation.
(state clif_load
    (type
        (struct
            (active Bool)
            (size_bits Int)
            (addr (bv 64))
        )
    )
    (default
        (not (:active clif_load))
    )
)

; Parameters of a CLIF store operation.
(state clif_store
    (type
        (struct
            (active Bool)
            (size_bits Int)
            (addr (bv 64))
            (value (bv 64))
        )
    )
    (default
        (and
            ; Store is not active.
            (not (:active clif_store))

            ; Must provide a fixed size in the default case, otherwise type
            ; inference is underconstrained.
            (= (:size_bits clif_store) 1)
        )
    )
)

;;;; Common Term Forms ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(form
    bv_unary_8_to_64
    ((args (bv  8)) (ret (bv  8)))
    ((args (bv 16)) (ret (bv 16)))
    ((args (bv 32)) (ret (bv 32)))
    ((args (bv 64)) (ret (bv 64)))
)

(form
    bv_binary_8_to_64
    ((args (bv  8) (bv  8)) (ret (bv  8)))
    ((args (bv 16) (bv 16)) (ret (bv 16)))
    ((args (bv 32) (bv 32)) (ret (bv 32)))
    ((args (bv 64) (bv 64)) (ret (bv 64)))
)

(form
    bv_ternary_8_to_64
    ((args (bv  8) (bv  8) (bv  8)) (ret (bv  8)))
    ((args (bv 16) (bv 16) (bv 16)) (ret (bv 16)))
    ((args (bv 32) (bv 32) (bv 32)) (ret (bv 32)))
    ((args (bv 64) (bv 64) (bv 64)) (ret (bv 64)))
)

;;;; CLIF Instruction Specifications ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(spec (iadd x y)
    (match (= result (bvadd x y))))
(instantiate iadd
    ((args (bv 8) (bv 8)) (ret (bv 8)))
    ((args (bv 16) (bv 16)) (ret (bv 16)))
    ((args (bv 32) (bv 32)) (ret (bv 32)))
    ((args (bv 64) (bv 64)) (ret (bv 64)))
    ((args (bv 128) (bv 128)) (ret (bv 128)))
)

(spec (isub x y)
    (match (= result (bvsub x y))))
(instantiate isub bv_binary_8_to_64)

(spec (ineg x)
    (match (= result (bvneg x))))
(instantiate ineg bv_unary_8_to_64)

(spec (iabs x)
    (provide (= result (if (bvsge x (zero_ext (widthof x) #b0)) x (bvneg x)))))
(instantiate iabs bv_unary_8_to_64)

(spec (imul x y)
    (match (= result (bvmul x y))))
(instantiate imul bv_binary_8_to_64)

(spec (smulhi x y)
    (match
        (let
            (
                (double (concat x x))
                (double_width (widthof double))
                (xwide (sign_ext double_width x))
                (ywide (sign_ext double_width y))
            )
            (with (low)
                (= (concat result low) (bvmul xwide ywide))
            )
        )
    )
)
(instantiate smulhi bv_binary_8_to_64)

(spec (umulhi x y)
    (match
        (let
            (
                (double (concat x x))
                (double_width (widthof double))
                (xwide (zero_ext double_width x))
                (ywide (zero_ext double_width y))
            )
            (with (low)
                (= (concat result low) (bvmul xwide ywide))
            )
        )
    )
)
(instantiate umulhi bv_binary_8_to_64)

(spec (iconst arg)
    (match (= arg (zero_ext 64 result))))
(instantiate iconst
    ((args (bv 64)) (ret (bv 64)))
)

(spec (ishl x y)
    (match
        (= result
            (bvshl
                x
                (bvand y (conv_to (widthof y) (bvsub (int2bv 64 (widthof y)) #x0000000000000001)))
            )
        )
    )
)
(instantiate ishl bv_binary_8_to_64)

(spec (band x y)
    (match (= result (bvand x y))))
(instantiate band bv_binary_8_to_64)

(spec (bxor x y)
    (match (= result (bvxor x y))))
(instantiate bxor bv_binary_8_to_64)

(spec (bor x y)
    (match (= result (bvor x y))))
(instantiate bor bv_binary_8_to_64)

(spec (bnot x)
    (match (= result (bvnot x))))
(instantiate bnot bv_unary_8_to_64)

(spec (rotl x y)
    (provide (= result (rotl x y))))
(instantiate rotl bv_binary_8_to_64)

(spec (bitselect c x y)
    (match (= result (bvor (bvand c x) (bvand (bvnot c) y)))))
(instantiate bitselect bv_ternary_8_to_64)

(spec (cls x) (provide (= result (cls x))))
(instantiate cls bv_unary_8_to_64)

(spec (load flags p offset)
    (modifies clif_load loaded_value)
    (match
        ; Activate the CLIF load effect
        (:active clif_load)

        ; TODO(mbm): load flags

        ; Load size is the width of the loaded value.
        (= (:size_bits clif_load) (widthof result))

        ; Address calculation.
        (= (:addr clif_load) (bvadd p (sign_ext 64 offset)))

        ; Result of the load is represented by low bits of the loaded value state register.
        (= result (conv_to (widthof result) loaded_value))
    )
)
(instantiate load
    ((args (named MemFlags) (named Value) (named Offset32)) (ret (bv  8)))
    ((args (named MemFlags) (named Value) (named Offset32)) (ret (bv 16)))
    ((args (named MemFlags) (named Value) (named Offset32)) (ret (bv 32)))
    ((args (named MemFlags) (named Value) (named Offset32)) (ret (bv 64)))
)

(spec (store flags value p offset)
    (modifies clif_store)
    (match
        ; Activate the CLIF store effect
        (:active clif_store)

        ; TODO(mbm): store flags

        ; Store size is the width of the stored value.
        (= (:size_bits clif_store) (widthof value))

        ; Address calculation.
        (= (:addr clif_store) (bvadd p (sign_ext 64 offset)))

        ; Stored value is set to the low bits of the CLIF store value.
        (= (conv_to (widthof value) (:value clif_store)) value)

        ; HACK: Result of the store is a 1-bit vector.
        (= result #b1)
    )
)
(instantiate store
    ((args (named MemFlags) (bv 32) (named Value) (named Offset32)) (ret (bv 1)))
    ((args (named MemFlags) (bv 64) (named Value) (named Offset32)) (ret (bv 1)))
)

(form extend
    ((args (bv  8)) (ret (bv  8)))
    ((args (bv  8)) (ret (bv 16)))
    ((args (bv  8)) (ret (bv 32)))
    ((args (bv  8)) (ret (bv 64)))
    ((args (bv 16)) (ret (bv 16)))
    ((args (bv 16)) (ret (bv 32)))
    ((args (bv 16)) (ret (bv 64)))
    ((args (bv 32)) (ret (bv 32)))
    ((args (bv 32)) (ret (bv 64)))
    ((args (bv 64)) (ret (bv 64)))
)

(spec (uextend x)
    (match (= result (zero_ext (widthof result) x))))
(instantiate uextend extend)

(spec (sextend x)
    (match (= result (sign_ext (widthof result) x))))
(instantiate sextend extend)

(spec (smin x y)
    (match (= result (if (bvsle x y) x y))))
(instantiate smin bv_binary_8_to_64)

(spec (umin x y)
    (match (= result (if (bvule x y) x y))))
(instantiate umin bv_binary_8_to_64)

(spec (smax x y)
    (provide (= result (if (bvsge x y) x y))))
(instantiate smax bv_binary_8_to_64)

(spec (umax x y)
    (provide (= result (if (bvuge x y) x y))))
(instantiate umax bv_binary_8_to_64)

(spec (icmp cc x y)
    (match
        (= result
            (if
                (match cc
                    ((Equal) (= x y))
                    ((NotEqual) (not (= x y)))
                    ((SignedGreaterThan) (bvsgt x y))
                    ((SignedGreaterThanOrEqual) (bvsge x y))
                    ((SignedLessThan) (bvslt x y))
                    ((SignedLessThanOrEqual) (bvsle x y))
                    ((UnsignedGreaterThan) (bvugt x y))
                    ((UnsignedGreaterThanOrEqual) (bvuge x y))
                    ((UnsignedLessThan) (bvult x y))
                    ((UnsignedLessThanOrEqual) (bvule x y))
                )
                #x01
                #x00
            )
        )
    )
)
(instantiate icmp
    ((args (named IntCC) (bv  8) (bv  8)) (ret (bv 8)))
    ((args (named IntCC) (bv 16) (bv 16)) (ret (bv 8)))
    ((args (named IntCC) (bv 32) (bv 32)) (ret (bv 8)))
    ((args (named IntCC) (bv 64) (bv 64)) (ret (bv 8)))
)
